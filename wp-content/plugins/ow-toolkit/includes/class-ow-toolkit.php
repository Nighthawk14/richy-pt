<?phpclass OW_Toolkit {	/**	 * The loader that's responsible for maintaining and registering all hooks that power	 * the plugin.	 *	 * @since    1.0.0	 * @access   protected	 * @var      OW_Toolkit_Loader    $loader    Maintains and registers all hooks for the plugin.	 */	protected $loader;	/**	 * The unique identifier of this plugin.	 *	 * @since    1.0.0	 * @access   protected	 * @var      string    $ow_toolkit    The string used to uniquely identify this plugin.	 */	protected $ow_toolkit;	/**	 * The current version of the plugin.	 *	 * @since    1.0.0	 * @access   protected	 * @var      string    $version    The current version of the plugin.	 */	protected $version;	/**	 * Define the core functionality of the plugin.	 *	 * Set the plugin name and the plugin version that can be used throughout the plugin.	 * Load the dependencies, define the locale, and set the hooks for the Dashboard and	 * the public-facing side of the site.	 *	 * @since    1.0.0	 */	public function __construct()	{		$this->ow_toolkit = 'ow-toolkit';		$this->version = '1.0';		$this->load_dependencies();		$this->define_admin_hooks();	}
	/**
	 * Load the required dependencies for this plugin.
	 *	 * Include the following files that make up the plugin:
	 *
	 * - OW_Toolkit_Admin. Defines all hooks for the dashboard
	 * - OW_Toolkit_Public. Defines all hooks for the public side of the site.
	 *
	 * Create an instance of the loader which will be used to register the hooks
	 * with WordPress.
	 *	 * @since    1.0.0	 * @access   private	*/	private function load_dependencies() {		/**			* The TGM plugin activation class allows us to require the ACF plugin			* to users.		*/		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/vendor/class-tgm-plugin-activation.php';		/**			* The class responsible for orchestrating the actions and filters of the			* core plugin.		*/		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'includes/class-ow-toolkit-loader.php';
		/**		* The class responsible for defining all actions that occur in the Dashboard.		*/		require_once plugin_dir_path( dirname( __FILE__ ) ) . 'admin/class-ow-toolkit-admin.php';
		/**		 * Adding the TGM registration for our required plugins. This must be added here		 * so we can stop the plugin from executing the run() function if the required		 * plugins are not available.		*/		add_action( 'tgmpa_register', array( $this, 'ow_add_required_plugins' ) );
		$this->loader = new OW_Toolkit_Loader();	}
	/**	 * Register all of the hooks related to the dashboard functionality	 * of the plugin.	 *	 * @since    1.0.0	 * @access   private	 */	private function define_admin_hooks() {		$plugin_admin = new OW_Toolkit_Admin( $this->get_ow_toolkit(), $this->get_version() );		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );		$this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );		/* Custom Post Type */		$this->loader->add_action( 'init', $plugin_admin, 'testimonials_post_init' );		$this->loader->add_action( 'init', $plugin_admin, 'plan_post_init' );		$this->loader->add_action( 'init', $plugin_admin, 'slider_post_init' );		// $this->loader->add_action( 'init', $plugin_admin, 'portfolio_post_init' );		$this->loader->add_action( 'init', $plugin_admin, 'classes_post_init' );		$this->loader->add_action( 'init', $plugin_admin, 'trainers_post_init' );	}
	/**	 * Add Required Plugin With TGM	 *	 * Requires ACF with the TGM activation plugin. Users will be prompted to install the 	 * plugin if they don't already have it.	 *	 * @since    1.0.0	 */	public function ow_add_required_plugins() {	    $plugins = array(			/*array(				'name'               => 'Custom Meta Boxes', // The plugin name.				'slug'               => 'Custom-Meta-Boxes-master', // The plugin slug (typically the folder name).				'source'             => 'https://github.com/humanmade/Custom-Meta-Boxes/archive/master.zip', // The plugin source.				'required'           => true, // If false, the plugin is only 'recommended' instead of required.			),						array(				'name' => 'Custom Meta Boxes', // The plugin name.				'slug' => 'Custom-Meta-Boxes-hm', // The plugin slug (typically the folder name).				'source' => get_template_directory() . '/admin/plugins/Custom-Meta-Boxes-hm.zip', // The plugin source.				'required' => true, // If false, the plugin is only 'recommended' instead of required.				'version' => '', // E.g. 1.0.0. If set, the active plugin must be this version or higher.				'force_activation' => false, // If true, plugin is activated upon theme activation and cannot be deactivated until theme switch.				'force_deactivation' => false, // If true, plugin is deactivated upon theme switch, useful for theme-specific plugins.				'external_url' => '', // If set, overrides default API URL and points to an external URL.			),*/			array(				'name'               => 'Contact Form 7', // The plugin name.				'slug'               => 'contact-form-7', // The plugin slug (typically the folder name).				'required'           => true,			),			array(				'name'               => 'Woocommerce', // The plugin name.				'slug'               => 'woocommerce', // The plugin slug (typically the folder name).				'required'           => true,			)	    );
	    /**	     * Array of configuration settings. Amend each line as needed.	     * If you want the default strings to be available under your own theme domain,	     * leave the strings uncommented.	     * Some of the strings are added into a sprintf, so see the comments at the	     * end of each line for what each argument will be.	     */	    $config = array(	        'default_path' => '',	        'menu'         => 'tgmpa-install-plugins',	        'has_notices'  => true,	        'dismissable'  => true,	        'dismiss_msg'  => '',	        'is_automatic' => false,	        'message'      => '',	        'strings'      => array(	            'page_title'                      => __( 'Install Required Plugins', 'bonsai-directory' ),	            'menu_title'                      => __( 'Install Plugins', 'bonsai-directory' ),	            'installing'                      => __( 'Installing Plugin: %s', 'bonsai-directory' ),	            'oops'                            => __( 'Something went wrong with the plugin API.', 'bonsai-directory' ),	            'notice_can_install_required'     => _n_noop( 'This theme requires the following plugin: %1$s.', 'This theme requires the following plugins: %1$s.' ),	            'notice_can_install_recommended'  => _n_noop( 'This theme recommends the following plugin: %1$s.', 'This theme recommends the following plugins: %1$s.' ),	            'notice_cannot_install'           => _n_noop( 'Sorry, but you do not have the correct permissions to install the %s plugin. Contact the administrator of this site for help on getting the plugin installed.', 'Sorry, but you do not have the correct permissions to install the %s plugins. Contact the administrator of this site for help on getting the plugins installed.' ),	            'notice_can_activate_required'    => _n_noop( 'The following required plugin is currently inactive: %1$s.', 'The following required plugins are currently inactive: %1$s.' ),	            'notice_can_activate_recommended' => _n_noop( 'The following recommended plugin is currently inactive: %1$s.', 'The following recommended plugins are currently inactive: %1$s.' ),	            'notice_cannot_activate'          => _n_noop( 'Sorry, but you do not have the correct permissions to activate the %s plugin. Contact the administrator of this site for help on getting the plugin activated.', 'Sorry, but you do not have the correct permissions to activate the %s plugins. Contact the administrator of this site for help on getting the plugins activated.' ),	            'notice_ask_to_update'            => _n_noop( 'The following plugin needs to be updated to its latest version to ensure maximum compatibility with this theme: %1$s.', 'The following plugins need to be updated to their latest version to ensure maximum compatibility with this theme: %1$s.' ),	            'notice_cannot_update'            => _n_noop( 'Sorry, but you do not have the correct permissions to update the %s plugin. Contact the administrator of this site for help on getting the plugin updated.', 'Sorry, but you do not have the correct permissions to update the %s plugins. Contact the administrator of this site for help on getting the plugins updated.' ),	            'install_link'                    => _n_noop( 'Begin installing plugin', 'Begin installing plugins' ),	            'activate_link'                   => _n_noop( 'Begin activating plugin', 'Begin activating plugins' ),	            'return'                          => __( 'Return to Required Plugins Installer', 'bonsai-directory' ),	            'plugin_activated'                => __( 'Plugin activated successfully.', 'bonsai-directory' ),	            'complete'                        => __( 'All plugins installed and activated successfully. %s', 'bonsai-directory' ),	            'nag_type'                        => 'updated'	        )	    );	    tgmpa( $plugins, $config );	}	/**	 * Run the loader to execute all of the hooks with WordPress.	 *	 * @since    1.0.0	 */	public function run() {		$this->loader->run();	}
	/**	 * The name of the plugin used to uniquely identify it within the context of	 * WordPress and to define internationalization functionality.	 *	 * @since     1.0.0	 * @return    string    The name of the plugin.	 */	public function get_ow_toolkit() {		return $this->ow_toolkit;	}
	/**	 * The reference to the class that orchestrates the hooks with the plugin.	 *	 * @since     1.0.0	 * @return    Bonsai_Directory_Loader    Orchestrates the hooks of the plugin.	 */	public function get_loader() {		return $this->loader;	}	/**	 * Retrieve the version number of the plugin.	 *	 * @since     1.0.0	 * @return    string    The version number of the plugin.	 */	public function get_version() {		return $this->version;	}}